3493  execve("/usr/bin/esnacc", ["/usr/bin/esnacc"], 0x7fffb82c7f50 /* 12 vars */) = 0
3493  brk(NULL)                         = 0x55e29aa63000
3493  arch_prctl(0x3001 /* ARCH_??? */, 0x7ffceebbfe00) = -1 EINVAL (Invalid argument)
3493  mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f0b6b138000
3493  access("/etc/ld.so.preload", R_OK) = -1 ENOENT (No such file or directory)
3493  openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
3493  newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=16001, ...}, AT_EMPTY_PATH) = 0
3493  mmap(NULL, 16001, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f0b6b134000
3493  close(3)                          = 0
3493  openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libcasn1.so.0", O_RDONLY|O_CLOEXEC) = 3
3493  read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\370C\1\0\0\0\0\0\0\0\0\0@\08\0\v\0@\0\34\0\33\0\1\0\0\0\4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\310:\0\0\0\0\0\0\310:\0\0\0\0\0\0\0\20\0\0\0\0\0\0\1\0\0\0\5\0\0\0"..., 832) = 832
3493  newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=84728, ...}, AT_EMPTY_PATH) = 0
3493  mmap(NULL, 86776, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f0b6b11e000
3493  mmap(0x7f0b6b122000, 45056, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x4000) = 0x7f0b6b122000
3493  mmap(0x7f0b6b12d000, 20480, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0xf000) = 0x7f0b6b12d000
3493  mmap(0x7f0b6b132000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x13000) = 0x7f0b6b132000
3493  close(3)                          = 0
3493  openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
3493  read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0P\237\2\0\0\0\0\0@\0\0\0\0\0\0\0\360\300!\0\0\0\0\0\0\0\0\0@\08\0\16\0@\0B\0A\0\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\20\3\0\0\0\0\0\0\20\3\0\0\0\0\0\0\10\0\0\0\0\0\0\0\3\0\0\0\4\0\0\0"..., 832) = 832
3493  pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\20\3\0\0\0\0\0\0\20\3\0\0\0\0\0\0\10\0\0\0\0\0\0\0\3\0\0\0\4\0\0\0000>\36\0\0\0\0\0000>\36\0\0\0\0\0000>\36\0\0\0\0\0\34\0\0\0\0\0\0\0\34\0\0\0\0\0\0\0\20\0\0\0\0\0\0\0\1\0\0\0\4\0\0\0\0\0\0\0\0\0\0\0"..., 784, 64) = 784
3493  pread64(3, "\4\0\0\0 \0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0\2\200\0\300\4\0\0\0\1\0\0\0\0\0\0\0", 48, 848) = 48
3493  pread64(3, "\4\0\0\0\24\0\0\0\3\0\0\0GNU\0\211\303\313\205\371\345PFwdq\376\320^\304AX\35\31i\4\0\0\0\20\0\0\0\1\0\0\0GNU\0\0\0\0\0\3\0\0\0\2\0\0\0\0\0\0\0", 68, 896) = 68
3493  newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=2216304, ...}, AT_EMPTY_PATH) = 0
3493  pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\20\3\0\0\0\0\0\0\20\3\0\0\0\0\0\0\10\0\0\0\0\0\0\0\3\0\0\0\4\0\0\0000>\36\0\0\0\0\0000>\36\0\0\0\0\0000>\36\0\0\0\0\0\34\0\0\0\0\0\0\0\34\0\0\0\0\0\0\0\20\0\0\0\0\0\0\0\1\0\0\0\4\0\0\0\0\0\0\0\0\0\0\0"..., 784, 64) = 784
3493  mmap(NULL, 2260560, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f0b6aef6000
3493  mmap(0x7f0b6af1e000, 1658880, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x28000) = 0x7f0b6af1e000
3493  mmap(0x7f0b6b0b3000, 360448, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1bd000) = 0x7f0b6b0b3000
3493  mmap(0x7f0b6b10b000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x214000) = 0x7f0b6b10b000
3493  mmap(0x7f0b6b111000, 52816, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f0b6b111000
3493  close(3)                          = 0
3493  openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libm.so.6", O_RDONLY|O_CLOEXEC) = 3
3493  read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\0\0\0\0PR\16\0\0\0\0\0\0\0\0\0@\08\0\v\0@\0\37\0\36\0\1\0\0\0\4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\340\322\0\0\0\0\0\0\340\322\0\0\0\0\0\0\0\20\0\0\0\0\0\0\1\0\0\0\5\0\0\0"..., 832) = 832
3493  newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=940560, ...}, AT_EMPTY_PATH) = 0
3493  mmap(NULL, 942344, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f0b6ae0f000
3493  mmap(0x7f0b6ae1d000, 507904, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0xe000) = 0x7f0b6ae1d000
3493  mmap(0x7f0b6ae99000, 372736, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x8a000) = 0x7f0b6ae99000
3493  mmap(0x7f0b6aef4000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0xe4000) = 0x7f0b6aef4000
3493  close(3)                          = 0
3493  mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f0b6ae0d000
3493  arch_prctl(ARCH_SET_FS, 0x7f0b6ae0db80) = 0
3493  set_tid_address(0x7f0b6ae0de50)   = 3493
3493  set_robust_list(0x7f0b6ae0de60, 24) = 0
3493  rseq(0x7f0b6ae0e520, 0x20, 0, 0x53053053) = 0
3493  mprotect(0x7f0b6b10b000, 16384, PROT_READ) = 0
3493  mprotect(0x7f0b6aef4000, 4096, PROT_READ) = 0
3493  mprotect(0x7f0b6b132000, 4096, PROT_READ) = 0
3493  mprotect(0x55e298dce000, 8192, PROT_READ) = 0
3493  mprotect(0x7f0b6b172000, 8192, PROT_READ) = 0
3493  prlimit64(0, RLIMIT_STACK, NULL, {rlim_cur=8192*1024, rlim_max=RLIM64_INFINITY}) = 0
3493  munmap(0x7f0b6b134000, 16001)     = 0
3493  write(2, "\nUsage: /usr/bin/esnacc ", 24) = 24
3493  write(2, "[-h] [-P] [-t] [-v] [-e] [-d] [-p] [-f] [-y] [-M] [-B] \n", 56) = 56
3493  write(2, "            [-c | -C | -T <table output file> | -idl ]\n", 55) = 55
3493  write(2, "            [-I <include directory>]\n", 37) = 37
3493  write(2, "            [-mm] [-mf <max file name length>]\n", 47) = 47
3493  write(2, "            [-l <neg number>]\n", 30) = 30
3493  write(2, "            [-VDAexport=DEFINE_NAME] to designate export of SNACC generated classes\n", 84) = 84
3493  write(2, "            [-E BER|DER select encoding rules to generate (C only)]\n", 68) = 68
3493  write(2, "            [-a <start number>] select starting number for ANYs\n", 64) = 64
3493  write(2, "            <ASN.1 file list>\n\n", 31) = 31
3493  write(2, "  -c   generate C encoders and decoders (default)\n", 50) = 50
3493  write(2, "  -C   generate C++ encoders and decoders\n", 42) = 42
3493  write(2, "  -T <filename> write a type table file for the ASN.1 modules to file filename\n", 79) = 79
3493  write(2, "  -O <filename> writes the type table file in the original (<1.3b2) format\n", 75) = 75
3493  write(2, "  -B   turns off generation of constrained PER classes\n", 55) = 55
3493  write(2, "  -idl generate CORBA IDL\n", 26) = 26
3493  write(2, "  -h   prints this msg\n", 23) = 23
3493  write(2, "  -P   print the parsed ASN.1 modules to stdout from their parse trees\n", 71) = 71
3493  write(2, "       (helpful debugging)\n", 27) = 27
3493  write(2, "  -t   generate type definitions\n", 33) = 33
3493  write(2, "  -v   generate value definitions (limited)\n", 44) = 44
3493  write(2, "  -e   generate encode routines\n", 32) = 32
3493  write(2, "  -d   generate decode routines\n", 32) = 32
3493  write(2, "  -p   generate print routines\n", 31) = 31
3493  write(2, "  -f   generate hierarchical free routines (C only)\n", 52) = 52
3493  write(2, "    Note: if none of -t -v -e -d -p -f are given, all are generated.\n", 69) = 69
3493  write(2, "    These do not affect type tables.\n", 37) = 37
3493  write(2, "  -y   enable bison debugging\n", 30) = 30
3493  write(2, "  -M   uses the 1990 Syntax, default is the 1997 Syntax\n", 56) = 56
3493  write(2, "  -mm  mangle output file name into module name (by default, the output file\n", 77) = 77
3493  write(2, "       inherits the input file's name, with only the suffix replaced)\n", 70) = 70
3493  write(2, "  -mf <num> num is maximum file name length for the generated source files\n", 75) = 75
3493  write(2, "  -mo <directory> store output in the directory specified by <directory>.\n", 74) = 74
3493  write(2, "  -l <neg num> where to start error longjmp values decending from (obscure).\n", 77) = 77
3493  write(2, "  -L <error log file> print syntax errors to the specified error log file\n", 74) = 74
3493  write(2, "                      (default is stderr)\n", 42) = 42
3493  write(2, "\nUse `-' as the ASN.1 source file name to parse stdin.\n\n", 56) = 56
3493  write(2, "This ASN.1 compiler produces C or C++ BER encoders and decoders or type tables.\n", 80) = 80
3493  write(2, "\nVersion 1.8.1\n", 15) = 15
3493  write(2, "Release Date:  2016-12-01\n", 26) = 26
3493  write(2, "Please see http://esnacc.org for new versions and where to send bug reports and comments.\n\n", 91) = 91
3493  write(2, "Copyright (C) 1993 Michael Sample and UBC\n", 42) = 42
3493  write(2, "Copyright (C) 1994, 1995 by Robert Joop and GMD FOKUS\n\n", 55) = 55
3493  write(2, "Copyright (C) 2011-2016 by Aaron Conole\n\n", 41) = 41
3493  write(2, "This program is free software; you can redistribute it and/or modify\n", 69) = 69
3493  write(2, "it under the terms of the GNU General Public License as published by\n", 69) = 69
3493  write(2, "the Free Software Foundation; either version 2 of the License, or\n", 66) = 66
3493  write(2, "(at your option) any later version.\n\n", 37) = 37
3493  write(2, "This program is distributed in the hope that it will be useful,\n", 64) = 64
3493  write(2, "but WITHOUT ANY WARRANTY; without even the implied warranty of\n", 63) = 63
3493  write(2, "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n", 62) = 62
3493  write(2, "GNU General Public License for more details.\n\n", 46) = 46
3493  write(2, "You should have received a copy of the GNU General Public License\n", 66) = 66
3493  exit_group(1)                     = ?
3493  +++ exited with 1 +++
