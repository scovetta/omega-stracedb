833   execve("/usr/bin/x86_64-linux-gnu-readelf", ["/usr/bin/x86_64-linux-gnu-readelf"], 0x7ffcaefd6a20 /* 12 vars */) = 0
833   brk(NULL)                         = 0x5652103d3000
833   arch_prctl(0x3001 /* ARCH_??? */, 0x7ffc69735080) = -1 EINVAL (Invalid argument)
833   mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f7897929000
833   access("/etc/ld.so.preload", R_OK) = -1 ENOENT (No such file or directory)
833   openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
833   newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=6681, ...}, AT_EMPTY_PATH) = 0
833   mmap(NULL, 6681, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f7897927000
833   close(3)                          = 0
833   openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libctf-nobfd-multiarch.so.0", O_RDONLY|O_CLOEXEC) = 3
833   read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\0\0\0\08u\3\0\0\0\0\0\0\0\0\0@\08\0\v\0@\0\36\0\35\0\1\0\0\0\4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\230:\0\0\0\0\0\0\230:\0\0\0\0\0\0\0\20\0\0\0\0\0\0\1\0\0\0\5\0\0\0"..., 832) = 832
833   newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=228536, ...}, AT_EMPTY_PATH) = 0
833   mmap(NULL, 231568, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f78978ee000
833   mmap(0x7f78978f2000, 167936, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x4000) = 0x7f78978f2000
833   mmap(0x7f789791b000, 40960, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x2d000) = 0x7f789791b000
833   mmap(0x7f7897925000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x36000) = 0x7f7897925000
833   close(3)                          = 0
833   openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libz.so.1", O_RDONLY|O_CLOEXEC) = 3
833   read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\10\242\1\0\0\0\0\0\0\0\0\0@\08\0\v\0@\0\36\0\35\0\1\0\0\0\4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\08\37\0\0\0\0\0\08\37\0\0\0\0\0\0\0\20\0\0\0\0\0\0\1\0\0\0\5\0\0\0"..., 832) = 832
833   newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=108936, ...}, AT_EMPTY_PATH) = 0
833   mmap(NULL, 110776, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f78978d2000
833   mprotect(0x7f78978d4000, 98304, PROT_NONE) = 0
833   mmap(0x7f78978d4000, 69632, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x2000) = 0x7f78978d4000
833   mmap(0x7f78978e5000, 24576, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x13000) = 0x7f78978e5000
833   mmap(0x7f78978ec000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x19000) = 0x7f78978ec000
833   close(3)                          = 0
833   openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
833   read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0P\237\2\0\0\0\0\0@\0\0\0\0\0\0\0\360\300!\0\0\0\0\0\0\0\0\0@\08\0\16\0@\0B\0A\0\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\20\3\0\0\0\0\0\0\20\3\0\0\0\0\0\0\10\0\0\0\0\0\0\0\3\0\0\0\4\0\0\0"..., 832) = 832
833   pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\20\3\0\0\0\0\0\0\20\3\0\0\0\0\0\0\10\0\0\0\0\0\0\0\3\0\0\0\4\0\0\0000>\36\0\0\0\0\0000>\36\0\0\0\0\0000>\36\0\0\0\0\0\34\0\0\0\0\0\0\0\34\0\0\0\0\0\0\0\20\0\0\0\0\0\0\0\1\0\0\0\4\0\0\0\0\0\0\0\0\0\0\0"..., 784, 64) = 784
833   pread64(3, "\4\0\0\0 \0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0\2\200\0\300\4\0\0\0\1\0\0\0\0\0\0\0", 48, 848) = 48
833   pread64(3, "\4\0\0\0\24\0\0\0\3\0\0\0GNU\0\211\303\313\205\371\345PFwdq\376\320^\304AX\35\31i\4\0\0\0\20\0\0\0\1\0\0\0GNU\0\0\0\0\0\3\0\0\0\2\0\0\0\0\0\0\0", 68, 896) = 68
833   newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=2216304, ...}, AT_EMPTY_PATH) = 0
833   pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\20\3\0\0\0\0\0\0\20\3\0\0\0\0\0\0\10\0\0\0\0\0\0\0\3\0\0\0\4\0\0\0000>\36\0\0\0\0\0000>\36\0\0\0\0\0000>\36\0\0\0\0\0\34\0\0\0\0\0\0\0\34\0\0\0\0\0\0\0\20\0\0\0\0\0\0\0\1\0\0\0\4\0\0\0\0\0\0\0\0\0\0\0"..., 784, 64) = 784
833   mmap(NULL, 2260560, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f78976aa000
833   mmap(0x7f78976d2000, 1658880, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x28000) = 0x7f78976d2000
833   mmap(0x7f7897867000, 360448, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1bd000) = 0x7f7897867000
833   mmap(0x7f78978bf000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x214000) = 0x7f78978bf000
833   mmap(0x7f78978c5000, 52816, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f78978c5000
833   close(3)                          = 0
833   mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f78976a8000
833   arch_prctl(ARCH_SET_FS, 0x7f78976a8b80) = 0
833   set_tid_address(0x7f78976a8e50)   = 833
833   set_robust_list(0x7f78976a8e60, 24) = 0
833   rseq(0x7f78976a9520, 0x20, 0, 0x53053053) = 0
833   mprotect(0x7f78978bf000, 16384, PROT_READ) = 0
833   mprotect(0x7f78978ec000, 4096, PROT_READ) = 0
833   mprotect(0x7f7897925000, 4096, PROT_READ) = 0
833   mprotect(0x56520fbf9000, 16384, PROT_READ) = 0
833   mprotect(0x7f7897963000, 8192, PROT_READ) = 0
833   prlimit64(0, RLIMIT_STACK, NULL, {rlim_cur=8192*1024, rlim_max=RLIM64_INFINITY}) = 0
833   munmap(0x7f7897927000, 6681)      = 0
833   getrandom("\x3f\x3f\xb6\xea\x4c\x45\x3d\x30", 8, GRND_NONBLOCK) = 8
833   brk(NULL)                         = 0x5652103d3000
833   brk(0x5652103f4000)               = 0x5652103f4000
833   write(2, "Usage: readelf <option(s)> elf-file(s)\n", 39) = 39
833   write(2, " Display information about the contents of ELF format files\n", 60) = 60
833   write(2, " Options are:\n", 14)   = 14
833   write(2, "  -a --all               Equivalent to: -h -l -S -s -r -d -V -A -I\n", 67) = 67
833   write(2, "  -h --file-header       Display the ELF file header\n", 53) = 53
833   write(2, "  -l --program-headers   Display the program headers\n", 53) = 53
833   write(2, "     --segments          An alias for --program-headers\n", 56) = 56
833   write(2, "  -S --section-headers   Display the sections' header\n", 54) = 54
833   write(2, "     --sections          An alias for --section-headers\n", 56) = 56
833   write(2, "  -g --section-groups    Display the section groups\n", 52) = 52
833   write(2, "  -t --section-details   Display the section details\n", 53) = 53
833   write(2, "  -e --headers           Equivalent to: -h -l -S\n", 49) = 49
833   write(2, "  -s --syms              Display the symbol table\n", 50) = 50
833   write(2, "     --symbols           An alias for --syms\n", 45) = 45
833   write(2, "     --dyn-syms          Display the dynamic symbol table\n", 58) = 58
833   write(2, "     --lto-syms          Display LTO symbol tables\n", 51) = 51
833   write(2, "     --sym-base=[0|8|10|16] \n                         Force base for symbol sizes.  The options are \n                         mi"..., 176) = 176
833   write(2, "  -C --demangle[=STYLE]  Decode mangled/processed symbol names\n", 63) = 63
833   write(2, "                           STYLE can be ", 40) = 40
833   write(2, "\"none\"", 6)           = 6
833   write(2, ", \"auto\"", 8)         = 8
833   write(2, ", \"gnu-v3\"", 10)      = 10
833   write(2, ", \"java\"", 8)         = 8
833   write(2, ",\n", 2)                = 2
833   write(2, "                           ", 27) = 27
833   write(2, "\"gnat\"", 6)           = 6
833   write(2, ", \"dlang\"", 9)        = 9
833   write(2, ", \"rust\"", 8)         = 8
833   write(2, "\n", 1)                 = 1
833   write(2, "     --no-demangle       Do not demangle low-level symbol names.  (default)\n", 76) = 76
833   write(2, "     --recurse-limit     Enable a demangling recursion limit.  (default)\n", 73) = 73
833   write(2, "     --no-recurse-limit  Disable a demangling recursion limit\n", 62) = 62
833   write(2, "     -U[dlexhi] --unicode=[default|locale|escape|hex|highlight|invalid]\n                         Display unicode characters as d"..., 374) = 374
833   write(2, "  -n --notes             Display the core notes (if present)\n", 61) = 61
833   write(2, "  -r --relocs            Display the relocations (if present)\n", 62) = 62
833   write(2, "  -u --unwind            Display the unwind info (if present)\n", 62) = 62
833   write(2, "  -d --dynamic           Display the dynamic section (if present)\n", 66) = 66
833   write(2, "  -V --version-info      Display the version sections (if present)\n", 67) = 67
833   write(2, "  -A --arch-specific     Display architecture specific information (if any)\n", 76) = 76
833   write(2, "  -c --archive-index     Display the symbol/file index in an archive\n", 69) = 69
833   write(2, "  -D --use-dynamic       Use the dynamic section info when displaying symbols\n", 78) = 78
833   write(2, "  -L --lint|--enable-checks\n                         Display warning messages for possible problems\n", 100) = 100
833   write(2, "  -x --hex-dump=<number|name>\n                         Dump the contents of section <number|name> as bytes\n", 107) = 107
833   write(2, "  -p --string-dump=<number|name>\n                         Dump the contents of section <number|name> as strings\n", 112) = 112
833   write(2, "  -R --relocated-dump=<number|name>\n                         Dump the relocated contents of section <number|name>\n", 114) = 114
833   write(2, "  -z --decompress        Decompress section before dumping it\n", 62) = 62
833   write(2, "  -w --debug-dump[a/=abbrev, A/=addr, r/=aranges, c/=cu_index, L/=decodedline,\n                  f/=frames, F/=frames-interp, g/"..., 414) = 414
833   write(2, "  -wk --debug-dump=links Display the contents of sections that link to separate\n                          debuginfo files\n", 122) = 122
833   write(2, "  -P --process-links     Display the contents of non-debug sections in separate\n                          debuginfo files.  (Imp"..., 138) = 138
833   write(2, "  -wK --debug-dump=follow-links\n                         Follow links to separate debug info files (default)\n", 109) = 109
833   write(2, "  -wN --debug-dump=no-follow-links\n                         Do not follow links to separate debug info files\n", 109) = 109
833   write(2, "  --dwarf-depth=N        Do not display DIEs at depth N or greater\n", 67) = 67
833   write(2, "  --dwarf-start=N        Display DIEs starting at offset N\n", 59) = 59
833   write(2, "  --ctf=<number|name>    Display CTF info from section <number|name>\n", 69) = 69
833   write(2, "  --ctf-parent=<name>    Use CTF archive member <name> as the CTF parent\n", 73) = 73
833   write(2, "  --ctf-symbols=<number|name>\n                         Use section <number|name> as the CTF external symtab\n", 108) = 108
833   write(2, "  --ctf-strings=<number|name>\n                         Use section <number|name> as the CTF external strtab\n", 108) = 108
833   write(2, "  -I --histogram         Display histogram of bucket list lengths\n", 66) = 66
833   write(2, "  -W --wide              Allow output width to exceed 80 characters\n", 68) = 68
833   write(2, "  -T --silent-truncation If a symbol name is truncated, do not add [...] suffix\n", 80) = 80
833   write(2, "  @<file>                Read options from <file>\n", 50) = 50
833   write(2, "  -H --help              Display this information\n", 50) = 50
833   write(2, "  -v --version           Display the version number of readelf\n", 63) = 63
833   exit_group(1)                     = ?
833   +++ exited with 1 +++
