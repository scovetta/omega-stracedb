
Usage: /usr/lib/erlang/lib/erl_interface-5.1/bin/erl_call [-[demqrsv]] [-c Cookie] [-h HiddenName] 
            [-x ErlScript] [-a [Mod [Fun [Args]]]] [-timeout Secs]
            (-n Node | -sname Node | -name Node | -address [HOSTNAME:]PORT)

  where: -a  apply(Mod,Fun,Args) (e.g -a 'erlang length [[a,b,c]]'
         -c  cookie string; by default read from ~/.erlang.cookie
         -d  direct Erlang output to ~/.erl_call.out.<Nodename>
         -e  evaluate contents of standard input (e.g., echo "X=1,Y=2,{X,Y}."|/usr/lib/erlang/lib/erl_interface-5.1/bin/erl_call -e ...)
         -fetch_stdout
           execute the code, specified with the -a or -e option, in a new
           process that has a group leader that forwards all stdout (standard
           output) data so that it is printed to stdout of the
           /usr/lib/erlang/lib/erl_interface-5.1/bin/erl_call process. See the /usr/lib/erlang/lib/erl_interface-5.1/bin/erl_call man page for additional information.
         -h  specify a name for the erl_call client node
         -m  read and compile Erlang module from stdin
         -n  name of Erlang node, same as -name
         -name  name of Erlang node, expanded to a fully qualified
         -sname name of Erlang node, short form will be used
         -address [HOSTNAME:]PORT of Erlang node
                  (the default hostname is the hostname of the local manchine)
                  (e.g., /usr/lib/erlang/lib/erl_interface-5.1/bin/erl_call -address my_host:36303 ...)
                  (cannot be combinated with -s, -n, -name and -sname)
         -no_result_term  do not print the result term
         -timeout  command timeout, in seconds
         -q  halt the Erlang node (overrides the -s switch)
         -r  use a random name for the erl_call client node
         -s  start a new Erlang node if necessary
         -v  verbose mode, i.e print some information on stderr
         -x  use specified erl start script, default is erl
