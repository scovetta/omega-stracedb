531   execve("/sbin/mkdosfs", ["/sbin/mkdosfs"], 0x7ffd927df1b0 /* 12 vars */) = 0
531   brk(NULL)                         = 0x55d7fa500000
531   arch_prctl(0x3001 /* ARCH_??? */, 0x7ffe2197c600) = -1 EINVAL (Invalid argument)
531   mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f0a2ec60000
531   access("/etc/ld.so.preload", R_OK) = -1 ENOENT (No such file or directory)
531   openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
531   newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=6133, ...}, AT_EMPTY_PATH) = 0
531   mmap(NULL, 6133, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f0a2ec5e000
531   close(3)                          = 0
531   openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
531   read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0P\237\2\0\0\0\0\0@\0\0\0\0\0\0\0\360\300!\0\0\0\0\0\0\0\0\0@\08\0\16\0@\0B\0A\0\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\20\3\0\0\0\0\0\0\20\3\0\0\0\0\0\0\10\0\0\0\0\0\0\0\3\0\0\0\4\0\0\0"..., 832) = 832
531   pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\20\3\0\0\0\0\0\0\20\3\0\0\0\0\0\0\10\0\0\0\0\0\0\0\3\0\0\0\4\0\0\0000>\36\0\0\0\0\0000>\36\0\0\0\0\0000>\36\0\0\0\0\0\34\0\0\0\0\0\0\0\34\0\0\0\0\0\0\0\20\0\0\0\0\0\0\0\1\0\0\0\4\0\0\0\0\0\0\0\0\0\0\0"..., 784, 64) = 784
531   pread64(3, "\4\0\0\0 \0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0\2\200\0\300\4\0\0\0\1\0\0\0\0\0\0\0", 48, 848) = 48
531   pread64(3, "\4\0\0\0\24\0\0\0\3\0\0\0GNU\0\211\303\313\205\371\345PFwdq\376\320^\304AX\35\31i\4\0\0\0\20\0\0\0\1\0\0\0GNU\0\0\0\0\0\3\0\0\0\2\0\0\0\0\0\0\0", 68, 896) = 68
531   newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=2216304, ...}, AT_EMPTY_PATH) = 0
531   pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\20\3\0\0\0\0\0\0\20\3\0\0\0\0\0\0\10\0\0\0\0\0\0\0\3\0\0\0\4\0\0\0000>\36\0\0\0\0\0000>\36\0\0\0\0\0000>\36\0\0\0\0\0\34\0\0\0\0\0\0\0\34\0\0\0\0\0\0\0\20\0\0\0\0\0\0\0\1\0\0\0\4\0\0\0\0\0\0\0\0\0\0\0"..., 784, 64) = 784
531   mmap(NULL, 2260560, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f0a2ea36000
531   mmap(0x7f0a2ea5e000, 1658880, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x28000) = 0x7f0a2ea5e000
531   mmap(0x7f0a2ebf3000, 360448, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1bd000) = 0x7f0a2ebf3000
531   mmap(0x7f0a2ec4b000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x214000) = 0x7f0a2ec4b000
531   mmap(0x7f0a2ec51000, 52816, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f0a2ec51000
531   close(3)                          = 0
531   mmap(NULL, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f0a2ea33000
531   arch_prctl(ARCH_SET_FS, 0x7f0a2ea33740) = 0
531   set_tid_address(0x7f0a2ea33a10)   = 531
531   set_robust_list(0x7f0a2ea33a20, 24) = 0
531   rseq(0x7f0a2ea340e0, 0x20, 0, 0x53053053) = 0
531   mprotect(0x7f0a2ec4b000, 16384, PROT_READ) = 0
531   mprotect(0x55d7f98e2000, 4096, PROT_READ) = 0
531   mprotect(0x7f0a2ec9a000, 8192, PROT_READ) = 0
531   prlimit64(0, RLIMIT_STACK, NULL, {rlim_cur=8192*1024, rlim_max=RLIM64_INFINITY}) = 0
531   munmap(0x7f0a2ec5e000, 6133)      = 0
531   newfstatat(1, "", {st_mode=S_IFREG|0777, st_size=0, ...}, AT_EMPTY_PATH) = 0
531   getrandom("\x34\xc6\xac\x9e\x62\xf4\x54\x85", 8, GRND_NONBLOCK) = 8
531   brk(NULL)                         = 0x55d7fa500000
531   brk(0x55d7fa521000)               = 0x55d7fa521000
531   openat(AT_FDCWD, "/usr/lib/x86_64-linux-gnu/gconv/gconv-modules.cache", O_RDONLY) = 3
531   newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=27002, ...}, AT_EMPTY_PATH) = 0
531   mmap(NULL, 27002, PROT_READ, MAP_SHARED, 3, 0) = 0x7f0a2ea2c000
531   close(3)                          = 0
531   futex(0x7f0a2ec50a6c, FUTEX_WAKE_PRIVATE, 2147483647) = 0
531   openat(AT_FDCWD, "/usr/lib/x86_64-linux-gnu/gconv/IBM850.so", O_RDONLY|O_CLOEXEC) = 3
531   read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\220A\0\0\0\0\0\0\0\0\0\0@\08\0\v\0@\0\36\0\35\0\1\0\0\0\4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\320\6\0\0\0\0\0\0\320\6\0\0\0\0\0\0\0\20\0\0\0\0\0\0\1\0\0\0\5\0\0\0"..., 832) = 832
531   newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=18704, ...}, AT_EMPTY_PATH) = 0
531   mmap(NULL, 20560, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f0a2ea26000
531   mmap(0x7f0a2ea27000, 8192, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1000) = 0x7f0a2ea27000
531   mmap(0x7f0a2ea29000, 4096, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x3000) = 0x7f0a2ea29000
531   mmap(0x7f0a2ea2a000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x3000) = 0x7f0a2ea2a000
531   close(3)                          = 0
531   mprotect(0x7f0a2ea2a000, 4096, PROT_READ) = 0
531   write(2, "Usage: /sbin/mkdosfs [OPTIONS] TARGET [BLOCKS]\n", 47) = 47
531   write(2, "Create FAT filesystem in TARGET, which can be a block device or file. Use only\n", 79) = 79
531   write(2, "up to BLOCKS 1024 byte blocks if specified. With the -C option, file TARGET will be\n", 84) = 84
531   write(2, "created with a size of 1024 bytes times BLOCKS, which must be specified.\n", 73) = 73
531   write(2, "\n", 1)                 = 1
531   write(2, "Options:\n", 9)         = 9
531   write(2, "  -a              Disable alignment of data structures\n", 55) = 55
531   write(2, "  -A              Toggle Atari variant of the filesystem\n", 57) = 57
531   write(2, "  -b SECTOR       Select SECTOR as location of the FAT32 backup boot sector\n", 76) = 76
531   write(2, "  -c              Check device for bad blocks before creating the filesystem\n", 77) = 77
531   write(2, "  -C              Create file TARGET then create filesystem in it\n", 66) = 66
531   write(2, "  -D NUMBER       Write BIOS drive number NUMBER to boot sector\n", 64) = 64
531   write(2, "  -f COUNT        Create COUNT file allocation tables\n", 54) = 54
531   write(2, "  -F SIZE         Select FAT size SIZE (12, 16 or 32)\n", 54) = 54
531   write(2, "  -g GEOM         Select disk geometry: heads/sectors_per_track\n", 64) = 64
531   write(2, "  -h NUMBER       Write hidden sectors NUMBER to boot sector\n", 61) = 61
531   write(2, "  -i VOLID        Set volume ID to VOLID (a 32 bit hexadecimal number)\n", 71) = 71
531   write(2, "  -I              Ignore and disable safety checks\n", 51) = 51
531   write(2, "  -l FILENAME     Read bad blocks list from FILENAME\n", 53) = 53
531   write(2, "  -m FILENAME     Replace default error message in boot block with contents of FILENAME\n", 88) = 88
531   write(2, "  -M TYPE         Set media type in boot sector to TYPE\n", 56) = 56
531   write(2, "  --mbr[=y|n|a]   Fill (fake) MBR table with one partition which spans whole disk\n", 82) = 82
531   write(2, "  -n LABEL        Set volume name to LABEL (up to 11 characters long)\n", 70) = 70
531   write(2, "  --codepage=N    use DOS codepage N to encode label (default: 850)\n", 68) = 68
531   write(2, "  -r COUNT        Make room for at least COUNT entries in the root directory\n", 77) = 77
531   write(2, "  -R COUNT        Set minimal number of reserved sectors to COUNT\n", 66) = 66
531   write(2, "  -s COUNT        Set number of sectors per cluster to COUNT\n", 61) = 61
531   write(2, "  -S SIZE         Select a sector size of SIZE (a power of two, at least 512)\n", 78) = 78
531   write(2, "  -v              Verbose execution\n", 36) = 36
531   write(2, "  --variant=TYPE  Select variant TYPE of filesystem (standard or Atari)\n", 72) = 72
531   write(2, "\n", 1)                 = 1
531   write(2, "  --invariant     Use constants for randomly generated or time based values\n", 76) = 76
531   write(2, "  --offset=SECTOR Write the filesystem at a specific sector into the device file.\n", 82) = 82
531   write(2, "  --help          Show this help message and exit\n", 50) = 50
531   write(1, "mkfs.fat 4.2 (2021-01-31)\nNo device specified.\n", 47) = 47
531   exit_group(1)                     = ?
531   +++ exited with 1 +++
